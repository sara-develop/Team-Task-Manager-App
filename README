# 🏆 Team Task Manager App

מערכת ניהול משימות צוותית מתקדמת
ניהול פרויקטים, משימות, משתמשים, הערות, התראות ולוח Kanban צבעוני  
**Stack מלא: Node.js, Fastify, React, SQL Server, MongoDB, Redis, RabbitMQ**

---

## טכנולוגיות עיקריות

| תחום         | טכנולוגיה/כלי         | תיאור |
|--------------|-----------------------|-------|
| Backend      | **Node.js**           | סביבת הרצה ל-JavaScript |
|              | **Fastify**           | מסגרת שרת מהירה ל-API |
|              | **MSSQL (SQL Server)**| מסד נתונים רלציוני למשימות/פרויקטים/משתמשים |
|              | **MongoDB**           | מסד NoSQL להערות/תגובות |
|              | **Redis**             | Cache מהיר ללוח Kanban |
|              | **RabbitMQ**          | תור הודעות (Notifications) |
|              | **dotenv**            | ניהול משתני סביבה |
|              | **amqplib**           | עבודה עם RabbitMQ |
|              | **mssql**             | חיבור ל-SQL Server |
|              | **mongodb**           | חיבור ל-MongoDB |
|              | **ioredis**           | חיבור ל-Redis |
| Frontend     | **React**             | SPA מודרני |
|              | **CSS Modules**       | עיצוב מודולרי |
|              | **Drag & Drop**       | לוח Kanban אינטראקטיבי |
| DevOps       | **Docker Compose**    | הרצת RabbitMQ בסביבה מבודדת |
| בדיקות       | **Jest**              | בדיקות יחידה (אופציונלי) |

---

## מבנה הפרויקט

```
Team Task Manager App/
│
├── server/                # צד שרת (Node.js + Fastify)
│   ├── db/                # חיבורי מסדי נתונים (SQL, Mongo, Redis)
│   ├── models/            # סכמות למסדי נתונים
│   ├── sql/               # ראוטים ולוגיקה ל-SQL (פרויקטים, משימות, משתמשים)
│   ├── mongoDB/           # הערות/תגובות (Mongo)
│   ├── mq/                # RabbitMQ Producer/Consumer
│   ├── json/              # דאטה לדוגמה/עזר
│   └── server.js          # קובץ הפעלה ראשי
│
├── client/                # צד לקוח (React)
│   ├── src/
│   │   ├── components/    # קומפוננטות (Kanban, Projects, Users, Comments)
│   │   └── services/      # קריאות API
│   └── public/            # קבצי סטטיים
│
└── README.md              # מדריך זה
```

---

## פיצ'רים עיקריים

- **ניהול פרויקטים:** יצירה, עריכה, מחיקה, צפייה בפרויקטים.
- **ניהול משימות:** יצירה, שיוך למשתמש, שינוי סטטוס (פתוח/בביצוע/הושלם), מחיקה.
- **מגבלת משימות למשתמש:** לא ניתן לשייך למשתמש יותר מ-X משימות בו-זמנית.
- **הערות/תגובות:** לכל משימה ניתן להוסיף תגובות (MongoDB).
- **לוח Kanban צבעוני:** הצגת משימות לפי סטטוס, כולל Drag & Drop (React).
- **Cache Kanban:** טעינה מהירה של לוח המשימות באמצעות Redis.
- **התראות (Notifications):** בעת שיוך משימה למשתמש – שליחת הודעה ל-RabbitMQ.
- **ניהול משתמשים:** יצירה, עריכה, מחיקה, צפייה.
- **API RESTful מלא:** לכל היישויות.
- **הרצה מקומית נוחה:** קבצי דוגמה, Docker ל-RabbitMQ.

---

## התקנה והרצה

### דרישות מוקדמות
- Node.js 18+
- SQL Server (Express/Local)
- MongoDB
- Redis
- Docker (להרצת RabbitMQ)

### התקנת צד שרת
```bash
cd server
npm install
# ערוך את קובץ .env לפי הצורך
npm run dev
```

### התקנת צד לקוח
```bash
cd client
npm install
npm start
```

### הרצת RabbitMQ (Docker)
```bash
cd server/mq
docker compose up -d
```

---

## דגשים טכנולוגיים

- **שכבות קוד מופרדות:** כל ישות (משתמשים, פרויקטים, משימות) מחולקת ל-controller ו-route.
- **שימוש ב-Redis:** טעינת Kanban מהירה, עדכון אוטומטי בכתיבה.
- **שימוש ב-RabbitMQ:** כל שיוך משימה למשתמש שולח הודעה ל-Queue, עם Consumer שמדפיס/מדמה שליחת התראה.
- **MongoDB:** הערות נשמרות במסד NoSQL, גמיש ונוח.
- **React Kanban:** ממשק מודרני, Drag & Drop, עיצוב צבעוני לכל סטטוס.
- **בדיקות:** תשתית מוכנה לבדוקי API ו-UI.

---

## הרחבות אפשריות

- אימות משתמשים (JWT)
- הרשאות לפי תפקיד
- שליחת התראות במייל/SMS
- דוחות סטטיסטיים
- בדיקות אוטומטיות

---

## תרומה והרצה

- מוזמנים להציע פיצ'רים, לדווח על באגים ולתרום קוד!
- להרצה בסביבת פיתוח – ראו הוראות למעלה.
- להרצה בסביבת Production – יש להוסיף reverse proxy, הגדרות אבטחה, ועוד.

---

## שאלות ותמיכה

לכל שאלה, פנייה או תמיכה – ניתן לפנות אליי במייל או ב-GitHub.

---

בהצלחה!